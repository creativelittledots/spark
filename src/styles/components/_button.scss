/*----------------------------------------------------------------------------*\
    #BUTTON COMPONENT STYLES
\*----------------------------------------------------------------------------*/

@mixin _nu-component__button(
    $btnReset: false,
    $btnRadius: $nu-radius,
    $styles: (
        default: (
            color: white,
            colorDisabled: grey,
            bgColor: $nu-colourPrimary,
            bgColorHover: darken($nu-colourPrimary, 20),
            bgColorDisabled: $nu-colourSecondary,
            padding: nu-rem(10) nu-rem(16)
        ),
        secondary: (
            color: $nu-colourPrimary,
            colorDisabled: grey,
            bgColor: $nu-colourSecondary,
            bgColorHover: darken($nu-colourSecondary, 20),
            bgColorDisabled: $nu-colourPrimary
        ),
        light: (
            color: $nu-colourPrimary,
            colorHover: white,
            bgColor: white,
            bgColorHover: $nu-colourPrimary
        ),
        line: (
            color: $nu-colourPrimary,
            lightColor: white
        ),
        text: (
            color: $nu-colourPrimary,
            lightColor: white
        ),
        round: ()
    ),
    $sizes: (
        tiny: (
            fontSize: nu-rem(12),
            padding: nu-rem(8) nu-rem(10)
        ),
        small: (
            fontSize: nu-rem(14),
            padding: nu-rem(8) nu-rem(10)
        ),
        medium: (
            padding: nu-rem(10) nu-rem(14)
        ),
        large: (
            padding: nu-rem(16) nu-rem(18)
        ),
        xlarge: (
            fontSize: nu-rem(18),
            padding: nu-rem(20) nu-rem(22)
        ),
        xxlarge: (
            fontSize: nu-rem(20),
            padding: nu-rem(24) nu-rem(26)
        ),
        xxxlarge: (
            fontSize: nu-rem(24),
            padding: nu-rem(32) nu-rem(34)
        )
    ),
    $trans: $nu-trans
) {
    $block: &;

    // .c-button
    appearance: none;
    border: none;
    border-radius: $btnRadius;
    box-shadow: inset 0 0 0 2px transparent;
    cursor: pointer;
    display: inline-block;
    line-height: 1;
    text-align: center;
    transition: all $trans;
    background: nu-mapDeepGet($styles, 'default', 'bgColor');
    padding: nu-mapDeepGet($styles, 'default', 'padding');
    color: nu-mapDeepGet($styles, 'default', 'color');


    /*  States  */

    &:disabled { // .c-button:disabled
        box-shadow: none;
        pointer-events: none;

        @if nu-mapDeepGet($styles, 'default', 'bgColorDisabled') {
            background-color: nu-mapDeepGet($styles, 'default', 'bgColorDisabled');
        }

        @if nu-mapDeepGet($styles, 'default', 'colorDisabled') {
            color: nu-mapDeepGet($styles, 'default', 'colorDisabled');
        }
    }

    &:focus { // .c-button:focus
        outline: none;
    }

    &:hover { // .c-button:hover
        background-color: nu-mapDeepGet($styles, 'default', 'bgColorHover');

        // Using a condition here as by default the hover color is undefined
        @if nu-mapDeepGet($styles, 'default', 'colorHover') {
            color: nu-mapDeepGet($styles, 'default', 'colorHover');
        }
    }


    /*  Modifiers: Styles  */

    @if map-has-key($styles, light) {

        &--light { // .c-button--light

            @if nu-mapDeepGet($styles, 'light', 'bgColor') {
                background-color: nu-mapDeepGet($styles, 'light', 'bgColor');
            }

            @if nu-mapDeepGet($styles, 'light', 'color') {
                color: nu-mapDeepGet($styles, 'light', 'color');
            }

            &:hover { // .c-button:hover
                box-shadow: inset 0 0 0 2px transparent;

                @if nu-mapDeepGet($styles, 'light', 'bgColorHover') {
                    background-color: nu-mapDeepGet($styles, 'light', 'bgColorHover');
                }

                @if nu-mapDeepGet($styles, 'light', 'colorHover') {
                    color: nu-mapDeepGet($styles, 'light', 'colorHover');
                }
            }
        }
    }

    @if map-has-key($styles, line) {

        &--line { // .c-button--line
            background: none;
            box-shadow: inset 0 0 0 2px nu-mapDeepGet($styles, 'line', 'color');
            color: nu-mapDeepGet($styles, 'line', 'color');

            &#{$block}--light { // .c-button--line.c-button--light
                box-shadow: inset 0 0 0 2px nu-mapDeepGet($styles, 'line', 'lightColor');
                color: nu-mapDeepGet($styles, 'line', 'lightColor');

                &:hover { // .c-button--line.c-button--light:hover
                    background-color: nu-mapDeepGet($styles, 'line', 'lightColor');
                    color: nu-mapDeepGet($styles, 'line', 'color');
                }
            }

            &:hover { // .c-button--line:hover
                background-color: nu-mapDeepGet($styles, 'line', 'color');
                color: nu-mapDeepGet($styles, 'line', 'lightColor');
            }
        }
    }

    @if map-has-key($styles, text) {

        &--text { // .c-button--text
            background: none;
            color: nu-mapDeepGet($styles, 'text', 'color');

            &#{$block}--secondary { // .c-button--text.c-button--secondary
                background: none;
                color: nu-mapDeepGet($styles, 'secondary', 'bgColor');
            }

            &:disabled { // .c-button--text:disabled
                background: none;
            }

            &:hover { // .c-button--text:hover
                color: nu-mapDeepGet($styles, 'text', 'lightColor');
                background: nu-mapDeepGet($styles, 'text', 'color');
            }

            &#{$block}--light { // .c-button--text.c-button--light
                color: nu-mapDeepGet($styles, 'text', 'lightColor');
            }
        }
    }

    @if map-has-key($styles, round) {

        &--round { // .c-button--round
            border-radius: nu-rem(160);
        }
    }

    @if map-has-key($styles, secondary) {

        &--secondary { // .c-button--secondary
            color: nu-mapDeepGet($styles, 'secondary', 'color');
            background: nu-mapDeepGet($styles, 'secondary', 'bgColor');

            &:hover { // .c-button--secondary:hover
                color: nu-mapDeepGet($styles, 'secondary', 'colorHover');
                background: nu-mapDeepGet($styles, 'secondary', 'bgColorHover');
            }

            &:disabled { // .c-button--secondary:disabled
                color: nu-mapDeepGet($styles, 'secondary', 'colorDisabled');
                background: nu-mapDeepGet($styles, 'secondary', 'bgColorDisabled');
            }
        }
    }


    /*  Modifiers: Sizes  */

    @each $size, $attrs in $sizes {

        &--#{$size} { // .c-button--tiny
            font-size: map-get($attrs, fontSize);
            padding: map-get($attrs, padding);
        }
    }
}



/// @group Components
/// @param {Boolean} $btnReset [false] - Reset default button styles
/// @param {Number} $btnRadius [$nu-radius] - Border radius of radius button modifier
/// @param {Map} $styles [(
///     default: (
///         color: white,
///         colorDisabled: grey,
///         bgColor: $nu-colourPrimary,
///         bgColorHover: darken($nu-colourPrimary, 20),
///         bgColorDisabled: $nu-colourSecondary,
///         padding: nu-rem(10) nu-rem(16)
///     ),
///     secondary: (
///         color: $nu-colourPrimary,
///         colorDisabled: grey,
///         bgColor: $nu-colourSecondary,
///         bgColorHover: darken($nu-colourSecondary, 20),
///         bgColorDisabled: $nu-colourPrimary
///     ),
///     light: (
///         color: $nu-colourPrimary,
///         colorHover: white,
///         bgColor: white,
///         bgColorHover: $nu-colourPrimary
///     ),
///     line: (
///         color: $nu-colourPrimary,
///         lightColor: white
///     ),
///     text: (
///         color: $nu-colourPrimary,
///         lightColor: white
///     ),
///     round: ()
/// )] - Declares button styles
/// @param {Map} $sizes [(
///     tiny: (
///         fontSize: nu-rem(12),
///         padding: nu-rem(8) nu-rem(10)
///     ),
///     small: (
///         fontSize: nu-rem(14),
///         padding: nu-rem(8) nu-rem(10)
///     ),
///     medium: (
///         padding: nu-rem(10) nu-rem(14)
///     ),
///     large: (
///         padding: nu-rem(16) nu-rem(18)
///     ),
///     xlarge: (
///         fontSize: nu-rem(18),
///         padding: nu-rem(20) nu-rem(22)
///     ),
///     xxlarge: (
///         fontSize: nu-rem(20),
///         padding: nu-rem(24) nu-rem(26)
///     ),
///     xxxlarge: (
///         fontSize: nu-rem(24),
///         padding: nu-rem(32) nu-rem(34)
///     )
/// )] - Declares button sizes
/// @param {Length} $trans [$nu-trans] - Sets transition properties eg. 0.2 ease
/// @require {function} nu-rem
/// @require {mixin} nu-area

@mixin nu-component__button(
    $btnReset: false,
    $btnRadius: $nu-radius,
    $styles: (
        default: (
            color: white,
            colorDisabled: grey,
            bgColor: $nu-colourPrimary,
            bgColorHover: darken($nu-colourPrimary, 20),
            bgColorDisabled: $nu-colourSecondary,
            padding: nu-rem(10) nu-rem(16)
        ),
        secondary: (
            color: $nu-colourPrimary,
            colorDisabled: grey,
            bgColor: $nu-colourSecondary,
            bgColorHover: darken($nu-colourSecondary, 20),
            bgColorDisabled: $nu-colourPrimary
        ),
        light: (
            color: $nu-colourPrimary,
            colorHover: white,
            bgColor: white,
            bgColorHover: $nu-colourPrimary
        ),
        line: (
            color: $nu-colourPrimary,
            lightColor: white
        ),
        text: (
            color: $nu-colourPrimary,
            lightColor: white
        ),
        round: ()
    ),
    $sizes: (
        tiny: (
            fontSize: nu-rem(12),
            padding: nu-rem(8) nu-rem(10)
        ),
        small: (
            fontSize: nu-rem(14),
            padding: nu-rem(8) nu-rem(10)
        ),
        medium: (
            padding: nu-rem(10) nu-rem(14)
        ),
        large: (
            padding: nu-rem(16) nu-rem(18)
        ),
        xlarge: (
            fontSize: nu-rem(18),
            padding: nu-rem(20) nu-rem(22)
        ),
        xxlarge: (
            fontSize: nu-rem(20),
            padding: nu-rem(24) nu-rem(26)
        ),
        xxxlarge: (
            fontSize: nu-rem(24),
            padding: nu-rem(32) nu-rem(34)
        )
    ),
    $trans: $nu-trans
) {

    $btnSelectors: 'button, [role="button"], [type="button"], [type="reset"], [type="submit"], ';
    $btnCondition: if($btnReset, $btnSelectors, null);

    #{$btnCondition}
    .c-button {

        @include _nu-component__button(
            $btnReset: $btnReset,
            $btnRadius: $btnRadius,
            $styles: $styles,
            $sizes: $sizes,
            $trans: $trans
        );
    }
}


