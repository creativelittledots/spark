/*----------------------------------------------------------------------------*\
    #COLOUR UTILITIES
\*----------------------------------------------------------------------------*/

/// @group Utilities
/// @param {Map} $colourPalette [$nu-colourPalette] - Colour palette map
/// @param {Number} $lightnessTolerance [50] - Threshold for white text to be applied to darker backgrounds
/// @param {String} $lightnessColour [white] - Light text colour for dark backgrounds
/// @param {List} $utilities [(background, colour)] - Map declaring which classes to create
/// @require {function} nu-strCapitalise
/// @require {function} nu-chain

@mixin nu-utility__colour(
    $colourPalette: $nu-colourPalette,
    $lightnessTolerance: 50, // The lightness component, between 0% and 100%, or false/null
    $lightnessColour: white, // Colour to set the text to if background colour is deemed to be dark
    $utilities: (
        background,
        colour
    )
) {

    @each $name, $colour in $colourPalette {

        // Capitalise our colour name (ie. red becomes Red)
        $name: nu-strCapitalise($name);

        @if index($utilities, background) {

            #{nu-chain(".u-bg" + $name)} { // .u-bgRed
                background-color: $colour;

                @if ( $lightnessTolerance and lightness($colour) < $lightnessTolerance ) {
                    color: $lightnessColour;
                }
            }
        }

        @if index($utilities, colour) {

            #{nu-chain(".u-colour" + $name)} { // .u-colourRed
                color: $colour;
            }
        }
    }
}


