/*----------------------------------------------------------------------------*\
    #SPACING HELPERS
\*----------------------------------------------------------------------------*/

@mixin ui-helper__spacing(
    $attrs: ( padding, margin ),    // Values: margin, padding
    $responsive: $responsive,       // Values: false, both, up, only
    $steps: 5,                      // Value must be an integer
    $fraction: 2,
    $directions: (                  // Values: top, bottom, left, right, top-bottom, left-right
        top,
        bottom,
        left,
        right,
        top-bottom
    )
) {

    // Check first if we need to provide responsive helpers
    @if $responsive != false {

        @include breakpoints( $responsive ) {

            @include create-helpers-spacing( $attrs, $steps, $directions, $fraction, $break );
        }

    // If not responsive, just run the general loop
    } @else {

        @include create-helpers-spacing( $attrs, $steps, $directions, $fraction, $break: '' );
    }
}

@mixin create-helpers-spacing( $attrs, $steps, $directions, $fraction, $break ) {

    // Create helpers for each step defined
    @for $step from 0 through $steps * $fraction {

        // Iterate through each attribute (padding, margin)
        @each $attr in $attrs {

            // Get the first character of the attribute for our helper classes (ie. 'p' from 'padding')
            $attrClass: str-slice($attr, 1, 1);
            $classStep: str-replace(inspect($step / $fraction), '.');

            // ie. .p-1@m
            #{chain('.' + $attrClass + '-' + $classStep + $break) } {
                #{ $attr }: #{ $step / $fraction }rem; // ie. padding: 1rem;
            }

            // Iterate through each direction
            @each $direction in $directions {

                // Get the first character of the direction (ie. 'l' from 'left')
                $dir: str-slice($direction, 1, 1);

                // If direction is top & bottom
                @if $direction == top-bottom {

                    // Make sure the step is greater than 0, to prevent p-0-0 output
                    @if $step > 0 {

                        // ie. .p-1-0@m

                        #{chain('.' + $attrClass + '-' + $classStep + '-0' + $break) } {
                            #{ $attr }: #{ $step / $fraction }rem 0; // ie. padding: 1rem 0
                        }
                    }

                // If direction is left & right
                } @else if $direction == left-right {

                    // Make sure the step is greater than 0, to prevent p-0-0 output
                    @if $step > 0 {

                        // ie. .p-0-1@em

                        #{chain('.' + $attrClass + '-0-' + $classStep + $break) } {
                            #{ $attr }: 0 #{ $step / $fraction }rem; // ie. padding: 0 1rem
                        }
                    }

                // All others
                } @else {

                    // ie. .p-l-1@m

                    #{chain('.' + $attrClass + '-' + $dir + '-' + $classStep + $break) } {
                        #{ $attr }-#{ $direction }: #{ $step / $fraction }rem; // ie. padding-left: 1rem
                    }
                }
            }
        }
    }
}


