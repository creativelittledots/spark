/*----------------------------------------------------------------------------*\
    #SPRINGBOARD

    SpringBoard objects, components, utilities & overrides. Comment to disable
\*----------------------------------------------------------------------------*/



/*----------------------------------------------------------------------------*\
    #GENERIC

    Ground-zero styles. Low-specificity, far-reaching.
\*----------------------------------------------------------------------------*/

@include sb-generic();

// @include sb-generic__reboot();          // A modern level playing field.
// @include sb-generic__shared();          // Shared global commonalities.


/*----------------------------------------------------------------------------*\
    #ELEMENTS

    Last layer for type selectors (h1-h6, a).
\*----------------------------------------------------------------------------*/

@include sb-elements();

// @include sb-element__document();        // Page-level styles (HTML, body etc).
// @include sb-element__form();            // Form inputs, textareas.
// @include sb-element__link();            // Hyperlinks.
// @include sb-element__list();            // Lists.
// @include sb-element__media();           // Media elements, img, svg, video, etc.
// @include sb-element__quote();           // Blockquotes, cite, etc.
// @include sb-element__table();           // Table element styles.
// @include sb-element__type();            // All type styles.


/*----------------------------------------------------------------------------*\
    #OBJECTS

    Design Patterns. Layout. No cosmetics. Start using agnostic classes only.
\*----------------------------------------------------------------------------*/

@include sb-objects();

// .o-grid { // Flex based grid layout.
//     @include sb-object__grid();
// }

// .o-inline { // Flex based inliner.
//     @include sb-object__inline();
// }

// .o-unlist { // Strip list styles.
//     @include sb-object__unlist();
// }


/*----------------------------------------------------------------------------*\
    #COMPONENTS

    Designed pieces of UI. Only using classes. More explicit naming.
\*----------------------------------------------------------------------------*/

@include sb-components();

// .c-adjacent { // Adjacent input styles.
//     @include sb-component__adjacent();
// }

// .c-button { // Button styles.
//     @include sb-component__button();
// }

// .c-loading { // Loading indicator component.
//     @include sb-component__loading();
// }

// .c-modal { // Modal styles.
//     @include sb-component__modal();
// }

// .js .c-nav { // Responsive navigation component.
//     @include sb-component__navigation();
// }

// .c-canvas { // Pure CSS off canvas panel.
//     @include sb-component__canvas();
// }

// .c-offCanvas { // Pure CSS off canvas panel.
//     @include sb-component__offCanvas();
// }

// .c-tabs { // Tabs component.
//     @include sb-component__tabs();
// }

// .c-toggle { // Toggle component.
//     @include sb-component__toggle();
// }

// .c-tooltip { // Tooltips component.
//     @include sb-component__tooltip();
// }

// .c-validate { // Form validation component.
//     @include sb-component__validate();
// }



/*----------------------------------------------------------------------------*\
    #UTILITIES

    Overrides, helpers, utilities. Only affect one item at a time.
\*----------------------------------------------------------------------------*/

@include sb-utilities();

// @include sb-utilities__flex();            // Flex based sizes.
// @include sb-utilities__offset();          // Give flex a helping hand.
// @include sb-utilities__size();            // Margin offsets for asymetric layouts.
// @include sb-utilities__spacing();         // Micro-level spacing.
// @include sb-utilities__text();            // Handy text assistants.
// @include sb-utilities__visibility();      // Helpers to show and side stuff.


