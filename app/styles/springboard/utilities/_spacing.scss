/*----------------------------------------------------------------------------*\
    #SPACING UTILITIES
\*----------------------------------------------------------------------------*/

@mixin sb\-utility__spacing(
    $attrs: ( padding, margin ),    // Values: margin, padding
    $responsive: $responsive,       // Values: false, both, up, only
    $steps: (                       // Array of integers (pixel values)
        0, 4, 8, 12, 16, 20, 24, 32, 40, 48
    ),
    $directions: (                  // Values: top, bottom, left, right, vertical, horizontal
        top,
        bottom,
        left,
        right,
        vertical,
        horizontal
    )
) {

    .safe-area-l {
        padding-left: env(safe-area-inset-left);
    }

    .safe-area-r {
        padding-right: env(safe-area-inset-right);
    }

    .safe-area-t {
        padding-top: env(safe-area-inset-top);
    }

    .safe-area-b {
        padding-bottom: env(safe-area-inset-bottom);
    }

    .safe-area-h {
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
    }

    .safe-area-v {
        padding-top: env(safe-area-inset-top);
        padding-bottom: env(safe-area-inset-bottom);
    }

    // Check first if we need to provide responsive utilities
    @if $responsive != false {

        @include breakpoints( $responsive ) {

            @include _sb\-utility__spacing-create( $attrs, $steps, $directions, $break );
        }

    // If not responsive, just run the general loop
    } @else {

        @include _sb\-utility__spacing-create( $attrs, $steps, $directions, $break: '' );
    }
}

@mixin _sb\-utility__spacing-create( $attrs, $steps, $directions, $break ) {

    // Create utilities for each step defined
    @each $step in $steps {

        // Iterate through each attribute (padding, margin)
        @each $attr in $attrs {

            // Get the first character of the attribute for our helper classes (ie. 'p' from 'padding')
            $attrClass: str-slice($attr, 1, 1);

            // ie. .u-p8@m
            #{chain('.u-' + $attrClass + $step + $break) } {
                #{ $attr }: rem($step); // ie. padding: rem(8);
            }

            // Iterate through each direction
            @each $direction in $directions {

                // Get the first character of the direction (ie. 'l' from 'left')
                $dir: str-slice($direction, 1, 1);

                // If direction is top & bottom
                @if $direction == vertical {

                    // ie. .u-pH-8@m
                    #{chain('.u-' + $attrClass + 'V-' + $step + $break) } {
                        #{ $attr }-top: rem($step); // ie. padding-top: rem(8)
                        #{ $attr }-bottom: rem($step); // ie. padding-bottom: rem(8)
                    }

                // If direction is left & right
                } @else if $direction == horizontal {

                    // ie. .u-pV-8@m
                    #{chain('.u-' + $attrClass + 'H-' + $step + $break) } {
                        #{ $attr }-left: rem($step); // ie. padding-left: rem(8)
                        #{ $attr }-right: rem($step); // ie. padding-right: rem(8)
                    }

                // All others
                } @else {

                    // ie. .u-pL-8@m
                    #{chain('.u-' + $attrClass + to-upper-case($dir) + '-' + $step + $break) } {
                        #{ $attr }-#{ $direction }: rem($step); // ie. padding-left: rem(8)
                    }
                }
            }
        }
    }
}


