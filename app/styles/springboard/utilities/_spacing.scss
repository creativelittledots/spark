/*----------------------------------------------------------------------------*\
    #SPACING UTILITIES
\*----------------------------------------------------------------------------*/

@mixin sb-utility__spacing(
    $attrs: ( padding, margin ),    // Values: margin, padding
    $dash: '-',
    $rem: false,
    $responsive: false,             // Values: false, both, up, only
    $steps: (                       // Array of integers (pixel values)
        0, 4, 8, 12, 16, 20, 24, 32, 40, 48
    ),
    $directions: (                  // Values: top, bottom, left, right, vertical, horizontal
        top,
        bottom,
        left,
        right,
        vertical,
        horizontal
    )
) {

    .u-safeArea-l {
        padding-left: env(safe-area-inset-left);
    }

    .u-safeArea-r {
        padding-right: env(safe-area-inset-right);
    }

    .u-safeArea-t {
        padding-top: env(safe-area-inset-top);
    }

    .u-safeArea-b {
        padding-bottom: env(safe-area-inset-bottom);
    }

    .u-safeArea-h {
        padding-left: env(safe-area-inset-left);
        padding-right: env(safe-area-inset-right);
    }

    .u-safeArea-v {
        padding-top: env(safe-area-inset-top);
        padding-bottom: env(safe-area-inset-bottom);
    }

    @include breakpoints( $responsive ) {

        // Iterate through each attribute (padding, margin)
        @each $attr in $attrs {

            // Get the first character of the attribute for our helper classes (ie. 'p' from 'padding')
            $attrClass: str-slice($attr, 1, 1);

            // If margin output auto values
            @if $attr == margin {

                #{chain('.u-' + $attrClass + $dash + 'a' + $break)} { // .u-m-a
                    #{$attr}: auto;  // ie. margin: auto;
                }

                // Iterate through each direction
                @each $direction in $directions {

                    // Get the first character of the direction (ie. 'l' from 'left')
                    $dir: str-slice($direction, 1, 1);

                    // If direction is top & bottom
                    @if $direction == vertical {

                        #{chain('.u-' + $attrClass + 'V-a' + $break) } { // .u-mV-a
                            #{ $attr }-top: auto;
                            #{ $attr }-bottom: auto;
                        }
                    }

                    // If direction is left & right
                    @else if $direction == horizontal {

                        #{chain('.u-' + $attrClass + 'H-a' + $break) } { // .u-mH-a
                            #{ $attr }-left: auto;
                            #{ $attr }-right: auto;
                        }
                    }

                    // All others
                    @else {

                        #{chain('.u-' + $attrClass + to-upper-case($dir) + '-a' + $break) } { // .u-mT-a
                            #{ $attr }-#{ $direction }: auto;
                        }
                    }
                }
            }

            // Create utilities for each step defined
            @each $step in $steps {

                $unit: if($rem and $step != 0, $step + rem, rem($step));

                $step: str-replace($step + unquote(''), '.', '');

                #{chain('.u-' + $attrClass + $dash + $step + $break)} { // .u-p-4
                    #{$attr}: $unit;
                }

                // Iterate through each direction
                @each $direction in $directions {

                    $dir: str-slice($direction, 1, 1);

                    // If direction is top & bottom
                    @if $direction == vertical {

                        #{chain('.u-' + $attrClass + 'V-' + $step + $break) } { // .u-pV-4
                            #{ $attr }-top: $unit;
                            #{ $attr }-bottom: $unit;
                        }
                    }

                    // If direction is left & right
                    @else if $direction == horizontal {

                        #{chain('.u-' + $attrClass + 'H-' + $step + $break) } { // .u-pH-4
                            #{ $attr }-left: $unit;
                            #{ $attr }-right: $unit;
                        }
                    }

                    // All others
                    @else {

                        #{chain('.u-' + $attrClass + to-upper-case($dir) + '-' + $step + $break) } { // .u-pT-4
                            #{ $attr }-#{ $direction }: $unit;
                        }
                    }
                }
            }
        }
    }
}

