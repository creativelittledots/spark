/*!---------------------------------------------------------------------------*\

    #CREATIVE LITTLE SPRINGBOARD

    - Version:      0.9.9
    - Author:       Creative Little Dots
    - Site:         http://creativelittle.uk/springboard
    - Copyright:    2018, Creative Little Dots
    â€“ License:      MIT | http://goo.gl/p3bexl

\*----------------------------------------------------------------------------*/



/*----------------------------------------------------------------------------*\
    #UTILITIES

    Globally-available functions and mixins.
\*----------------------------------------------------------------------------*/

@import 'tools';                    // Functions & mixins.



/*----------------------------------------------------------------------------*\
    #GENERIC

    Ground-zero styles. Low-specificity, far-reaching.
\*----------------------------------------------------------------------------*/

@import 'generic/reboot';               // A modern level playing field.
@import 'generic/shared';               // Shared global commonalities.

@mixin sb-generic() {

    @include sb-generic__reboot();
    @include sb-generic__shared();
}



/*----------------------------------------------------------------------------*\
    #ELEMENTS

    Last layer for type selectors (h1-h6, a).
\*----------------------------------------------------------------------------*/

@import 'elements/document';            // Page-level styles (HTML, body etc).
@import 'elements/forms';               // Form inputs, textareas.
@import 'elements/links';               // Hyperlinks.
@import 'elements/lists';               // Lists.
@import 'elements/media';               // Media elements, img, svg, video, etc.
@import 'elements/quotes';              // Blockquotes, cite, etc.
@import 'elements/tables';              // Table element styles.
@import 'elements/type';                // All type styles.

@mixin sb-elements() {

    @include sb-element__document();
    @include sb-element__form();
    @include sb-element__link();
    @include sb-element__list();
    @include sb-element__media();
    @include sb-element__quote();
    @include sb-element__table();
    @include sb-element__type();
}



/*----------------------------------------------------------------------------*\
    #OBJECTS

    Design Patterns. Layout. No cosmetics. Start using agnostic classes only.
\*----------------------------------------------------------------------------*/

@import 'objects/bricks';               // Flex based block layout.
@import 'objects/grid';                 // Flex based grid layout.
@import 'objects/inline';               // Flex based inliner.
@import 'objects/unlist';               // Strip list styles.

@mixin sb-objects() {

    @include sb-object__bricks();
    @include sb-object__grid();
    @include sb-object__inline();
    @include sb-object__unlist();
}



/*----------------------------------------------------------------------------*\
    #COMPONENTS

    Designed pieces of UI. Only using classes. More explicit naming.
\*----------------------------------------------------------------------------*/

@import 'components/adjacent';          // Adjacent input styles.
@import 'components/button';            // Button styles.
@import 'components/loading';           // Loading indicator component.
@import 'components/modal';             // Modal styles.
@import 'components/navigation';        // Responsive navigation component.
@import 'components/offCanvas';         // Pure CSS off canvas panel.
@import 'components/tabs';              // Tabs component.
@import 'components/toggle';            // Toggle component.
@import 'components/tooltip';           // Tooltips component.
@import 'components/validate';          // Form validation component.

@mixin sb-components() {

    @include sb-component__adjacent();
    @include sb-component__button();
    @include sb-component__loading();
    @include sb-component__modal();
    @include sb-component__navigation();
    @include sb-component__offCanvas();
    @include sb-component__tabs();
    @include sb-component__toggle();
    @include sb-component__tooltip();
    @include sb-component__validate();
}



/*----------------------------------------------------------------------------*\
    #UTILITIES

    Overrides, helpers, utilities. Only affect one item at a time.
\*----------------------------------------------------------------------------*/

@import 'utilities/colours';              // Helpers to set either background or text colour.
@import 'utilities/flex';                 // Give flex a helping hand.
@import 'utilities/offset';               // Margin offsets for asymetric layouts.
@import 'utilities/size';                 // Flex based sizes.
@import 'utilities/spacing';              // Micro-level spacing.
@import 'utilities/text';                 // Handy text assistants.
@import 'utilities/visibility';           // Helpers to show and side stuff.

@mixin sb-utilities() {

    @include sb-utility__colour();
    @include sb-utility__flex();
    @include sb-utility__offset();
    @include sb-utility__size();
    @include sb-utility__spacing();
    @include sb-utility__text();
    @include sb-utility__visibility();
}


