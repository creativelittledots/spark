(function () {
    'use strict';

    var S = function S(selector) {
        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


        return container.querySelector(selector);
    };

    var SA = function SA(selector) {
        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


        return container.querySelectorAll(selector);
    };

    var CN = function CN(classname) {
        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


        return container.getElementsByClassName(classname);
    };

    var ID = function ID(id) {
        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


        return container.getElementById(id);
    };

    var TN = function TN(tag) {
        var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


        return container.getElementsByTagName(tag);
    };

    var extend = function () {

        Window.prototype.on = Window.prototype.addEventListener;
        Window.prototype.off = Window.prototype.removeEventListener;

        Node.prototype.on = Node.prototype.addEventListener;
        Node.prototype.off = Node.prototype.removeEventListener;
    }();

    var _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    var toConsumableArray = function (arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

        return arr2;
      } else {
        return Array.from(arr);
      }
    };

    /*--------------------------------------------------*\
        Utilites Module

        MK1 @ Version 1.0
    \*--------------------------------------------------*/

    /*--------------------------------------------------*\
        JS Document Classes

        This sets the classes on the HTML element.
    \*--------------------------------------------------*/

    var setDocClasses = function setDocClasses() {

        document.documentElement.classList.remove('no-js');
        document.documentElement.classList.add('js');

        if (window.navigator.standalone == true || window.matchMedia('(display-mode: standalone)').matches) {

            document.documentElement.classList.add('standalone');
        }
    };

    /*--------------------------------------------------*\
        Input Type Detection

        This function sets the real type on inputs.
    \*--------------------------------------------------*/

    var setInputTypes = function setInputTypes() {

        [].concat(toConsumableArray(TN('input'))).map(function ($el) {

            if ($el.type !== $el.getAttribute('type')) {

                $el.setAttribute('type', $el.type);
            }
        });
    };

    /*--------------------------------------------------*\
        Sticky Position Polyfill Setup

        This function sets the real type on inputs.
    \*--------------------------------------------------*/

    var sticky = function sticky() {

        if (Stickyfill) {

            [].concat(toConsumableArray(CN('u-sticky'))).map(function ($el) {
                return Stickyfill.add($el);
            });

            [].concat(toConsumableArray(CN('c-modal__close'))).map(function ($el) {
                return Stickyfill.add($el);
            });
        }
    };

    /*--------------------------------------------------*\
        Support for standalone links

        This stops webapps jumping out to Safari on iOS
    \*--------------------------------------------------*/

    var _history = function _history(e) {

        e.preventDefault();

        if ($el.dataset.history === ('reload')) {

            location.reload();
        } else {

            history[$el.dataset.history]();
        }
    };

    var _target = function _target(e) {

        var target = e.target;
        var location = document.location;
        var stop = /^(a|html)$/i;

        while (!stop.test(target.nodeName)) {

            target = target.parentNode;
        }

        if ('href' in target && (href = target.href).replace(location.href, '').indexOf('#') && (!/^[a-z\+\.\-]+:/i.test(href) || href.indexOf(location.protocol + '//' + location.host) === 0)) {

            e.preventDefault();

            location.href = target.href;
        }
    };

    var standaloneLinks = function standaloneLinks() {

        if ('standalone' in navigator && navigator['standalone']) {

            var $els = CN('js-history');

            [].concat(toConsumableArray($els)).map(function ($el) {

                $el.on('click', _history);
            });

            document.on('click', _target, false);
        }
    };

    var destroyStandaloneLinks = function destroyStandaloneLinks() {

        if ('standalone' in navigator && navigator['standalone']) {

            var $els = CN('js-history');

            [].concat(toConsumableArray($els)).map(function ($el) {

                $el.off('click', _history);
            });

            document.off('click', _target, false);
        }
    };

    /*--------------------------------------------------*\
        Core Module

        MK1 @ Version 1.0
    \*--------------------------------------------------*/

    function Core (options) {

        // Private: Default settings object
        var _defaults = {};

        // Private: Merge passed in object with defaults
        var _settings = _extends({}, _defaults, options);

        // Public: Destroy module instance
        var destroy = function destroy() {

            Stickyfill && Stickyfill.remove(SA('.u-sticky'));

            destroyStandaloneLinks();
        };

        // Public: Destroy module instance and run initialise again
        var reinit = function reinit() {

            destroy();
            init();
        };

        // Public: Initialise module
        function init() {

            setDocClasses();
            setInputTypes();
            sticky();
            standaloneLinks();
            svg4everybody();
        }

        // Return public methods
        return {
            destroy: destroy,
            reinit: reinit,
            init: init()
        };
    }

    /*--------------------------------------------------*\
        Modal Module

        MK1 @ Version 1.0
    \*--------------------------------------------------*/

    // Module instantiation
    function Modals (options) {
        var _this = this;

        // Private: Default settings object
        var _defaults = {
            beforeOpen: null,
            afterOpen: null,
            beforeClose: null,
            afterClose: null
        };

        // Private: Merge passed in object with defaults
        var _settings = _extends({}, _defaults, options);

        // Private: Get elements
        var _getEls = {
            open: CN('js-modal__open'),
            close: CN('js-modal__close'),
            modal: CN('c-modal')
        };

        // Private: Click event callback for open method
        var _clickOpen = function _clickOpen(event) {

            event.preventDefault();

            open(event.target.hash.substring(1));
        };

        // Private: Click event callback for close method
        var _clickClose = function _clickClose(event) {

            event.preventDefault();

            close(event.target.closest('.c-modal').id);
        };

        // Private: Click modal background event callback for close method
        var _clickOverlay = function _clickOverlay(event) {

            if (this.classList.contains('c-modal') && event.target === this) {

                event.preventDefault();

                close(this.closest('.c-modal').id);
            }
        };

        var _escape = function _escape(event) {

            var activeModals = SA('.c-modal.active');

            if (event.key == 'Escape' && activeModals.length) {

                var topModal = activeModals.length - 1;

                close(activeModals[topModal].id);
            }
        };

        // Public: Open method
        var open = function open(id, push) {

            // Store target elements for later use
            var $modal = ID(id);

            // Pass data to events
            var data = {
                detail: {
                    id: id,
                    modal: $modal
                }
            };

            // Define custom events
            var before = new CustomEvent('modal.open:before', data);
            var after = new CustomEvent('modal.open:after', data);

            // Check for before callback and run
            typeof _settings.beforeOpen == 'function' && _settings.beforeOpen.call(_this);

            // Dispatch the before event
            document.dispatchEvent(before);

            // Add classes
            $modal.classList.add('active');
            document.body.classList.add('u-locked');

            //Update history states
            !push && history.pushState({}, '', '#' + id);

            // Check for after callback and run
            typeof _settings.afterOpen == 'function' && _settings.afterOpen.call(_this);

            // Dispatch the after event
            document.dispatchEvent(after);
        };

        // Public: close method
        var close = function close(id) {

            // Pass data to events
            var data = {
                detail: {
                    id: id
                }
            };

            // Define custom events
            var before = new CustomEvent('modal.close:before', data);
            var after = new CustomEvent('modal.close:after', data);

            // Check for before callback and run
            typeof _settings.beforeClose == 'function' && _settings.beforeClose.call(_this);

            // Dispatch the before event
            document.dispatchEvent(before);

            if (SA('.c-modal.active').length === 1) {

                document.body.classList.remove('u-locked');
            }

            if (id) {

                ID(id).closest('.c-modal').classList.remove('active');
            } else {

                [].concat(toConsumableArray(SA('.c-modal'))).map(function ($el) {
                    return $el.classList.remove('active');
                });
            }

            //history.pushState({}, '', location.origin + location.pathname);

            // Check for after callback and run
            typeof _settings.afterClose == 'function' && _settings.afterClose.call(_this);

            // Dispatch the after event
            document.dispatchEvent(after);
        };

        // Public: Destroy module instance
        var destroy = function destroy() {

            close();

            // Remove click events to each link
            [].concat(toConsumableArray(_getEls.open)).map(function ($link) {
                return $link.off('click', _clickOpen);
            });
            [].concat(toConsumableArray(_getEls.close)).map(function ($link) {
                return $link.off('click', _clickClose);
            });
            [].concat(toConsumableArray(_getEls.modal)).map(function ($link) {
                return $link.off('click', _clickOverlay);
            });

            // Remove escape key event listener
            window.off('keydown', _escape);

            document.off('fetcher:after', reinit);
        };

        // Public: Destroy module instance and run initialise again
        var reinit = function reinit() {

            destroy();
            init();
        };

        // Public: Initialise module
        function init() {

            // Get data
            var hash = location.hash.substring(1);
            var $el = ID(hash);

            // Run check and open modal if successful
            if ($el && $el.classList.contains('c-modal')) {

                open(hash);
            }

            // Add click events to each link
            [].concat(toConsumableArray(_getEls.open)).map(function ($link) {
                return $link.on('click', _clickOpen);
            });
            [].concat(toConsumableArray(_getEls.close)).map(function ($link) {
                return $link.on('click', _clickClose);
            });
            [].concat(toConsumableArray(_getEls.modal)).map(function ($link) {
                return $link.on('click', _clickOverlay);
            });

            // Escape key event listener
            window.on('keydown', _escape);

            document.on('fetcher:after', reinit);
        }

        // Return public methods
        return {
            open: open,
            close: close,
            destroy: destroy,
            reinit: reinit,
            init: init()
        };
    }

    /*--------------------------------------------------*\
        Tabs Module

        MK1 @ Version 1.0
    \*--------------------------------------------------*/

    // Module instantiation
    function Tabs (options) {
        var _this = this;

        // Private: Default settings object
        var _defaults = {
            animate: true,
            before: null,
            after: null
        };

        // Private: Merge passed in object with defaults
        var _settings = _extends({}, _defaults, options);

        // Private: Click event callback for goto method
        var _clickGoto = function _clickGoto(event) {

            event.preventDefault();

            goto(event.target.hash.substring(1));
        };

        // Public:  Go to method
        var goto = function goto(id, push) {

            // Store elements for later use
            var $this = id ? S('[href="#' + id + '"]') : _this;
            var $tabs = $this.closest('.js-tabs').getElementsByClassName('js-tab');

            // Store target elements for later use
            var $content = ID(id);
            var $contents = $content.closest('.js-tabs-contents').getElementsByClassName('js-tab-content');

            // Pass data to events
            var data = {
                detail: {
                    tab: $this,
                    tabs: $tabs,
                    content: $content,
                    contents: $contents
                }
            };

            // Define custom events
            var before = new CustomEvent('tab:before', data);
            var after = new CustomEvent('tab:after', data);

            // Check for before callback and run
            typeof _settings.before == 'function' && _settings.before.call(_this);

            // Dispatch the before event
            document.dispatchEvent(before);

            // Remove all active states from
            [].concat(toConsumableArray($tabs), toConsumableArray($contents)).map(function ($el) {
                return $el.classList.remove('active');
            });

            // Add classes
            $this.classList.add('active');
            $content.classList.add('active');

            //Update history states
            !push && history.pushState({}, '', '#' + id);

            // Check for after callback and run
            typeof _settings.after == 'function' && _settings.after.call(_this);

            // Dispatch the after event
            document.dispatchEvent(after);
        };

        // Private: Deep Link
        var _deeplink = function _deeplink() {

            var hash = location.hash.substring(1);
            var $el = ID(hash);

            if ($el && $el.classList.contains('js-tab-content')) {

                goto(hash, true);
            }
        };

        // Public: Destroy module instance
        var destroy = function destroy() {

            // Get all elements
            var $tabs = CN('js-tab');

            // Add click events to each link
            [].concat(toConsumableArray($tabs)).map(function ($el) {
                return $el.off('click', _clickGoto);
            });
        };

        // Public: Destroy module instance and run initialise again
        var reinit = function reinit() {

            destroy();
            init();
        };

        // Public: Initialise module
        function init() {

            // Get data
            var $tabs = CN('js-tab');

            // Add click events to each link
            [].concat(toConsumableArray($tabs)).map(function ($el) {
                return $el.on('click', _clickGoto);
            });

            _deeplink();

            document.on('fetcher:after', reinit);
        }

        // Return public methods
        return {
            goto: goto,
            destroy: destroy,
            reinit: reinit,
            init: init()
        };
    }

    /*!---------------------------------------------------------------------------*\
        SpringBoard

        - Version:      0.9.9
        - Author:       Creative Little Dots
        - Site:         http://creativelittle.uk/springboard
        - Copyright:    2018, Creative Little Dots
        – License:      MIT | http://goo.gl/p3bexl
    \*----------------------------------------------------------------------------*/

    /* SpringBoard */

    window.SpringBoard = function (options) {

        // Private: Default settings object
        var _defaults = {
            core: {},
            //fetcher: {},
            modals: {},
            tabs: {}
        };

        // Private: Merge passed in object with defaults
        var _settings = _extends({}, _defaults, options);

        var _modules = {};

        // Public: Destroy module instance
        var destroy = function destroy() {

            _modules.core.destroy();
            //_modules.fetcher.destroy();
            _modules.modals.destroy();
            _modules.tabs.destroy();
        };

        // Public: Destroy module instance and run initialise again
        var reinit = function reinit() {

            destroy();
            init();
        };

        // Public: Initialise module
        function init() {

            _modules.core = new Core(_settings.core);
            //_modules.fetcher  = new Fetcher(_settings.fetcher);
            _modules.modals = new Modals(_settings.modals);
            _modules.tabs = new Tabs(_settings.tabs);
        }

        return {
            destroy: destroy,
            reinit: reinit,
            init: init()
        };
    };

}());
